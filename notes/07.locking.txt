Another way to understand why 2pl locking works
-----------------------------------------------
                   modify
                  --------
            lock /        \ unlock
                /          \
A transaction accumulates locks, and then instantly
modifies all data elements at the time of unlocking.

Why real-world system have a more complicated
---------------------------------------------
lock compatibility matrix
-------------------------

Compatibility matrix for MySQL metadata operations

     Request  |  Granted requests for lock       |
      type    | S  SH  SR  SW  SU  SNW  SNRW  X  |
    ----------+----------------------------------+
    S         | +   +   +   +   +   +    +    -  |
    SH        | +   +   +   +   +   +    +    -  |
    SR        | +   +   +   +   +   +    -    -  |
    SW        | +   +   +   +   +   -    -    -  |
    SU        | +   +   +   +   -   -    -    -  |
    SNW       | +   +   +   -   -   -    -    -  |
    SNRW      | +   +   -   -   -   -    -    -  |
    X         | -   -   -   -   -   -    -    -  |
    SU -> X   | -   -   -   -   0   0    0    0  |
    SNW -> X  | -   -   -   0   0   0    0    0  |
    SNRW -> X | -   -   0   0   0   0    0    0  |

  The second array specifies if particular type of request can be satisfied
  if there is waiting request for the same lock of certain type. In other
  words it specifies what is the priority of different lock types.

     Request  |  Pending requests for lock      |
      type    | S  SH  SR  SW  SU  SNW  SNRW  X |
    ----------+---------------------------------+
    S         | +   +   +   +   +   +     +   - |
    SH        | +   +   +   +   +   +     +   + |
    SR        | +   +   +   +   +   +     -   - |
    SW        | +   +   +   +   +   -     -   - |
    SU        | +   +   +   +   +   +     +   - |
    SNW       | +   +   +   +   +   +     +   - |
    SNRW      | +   +   +   +   +   +     +   - |
    X         | +   +   +   +   +   +     +   + |
    SU -> X   | +   +   +   +   +   +     +   + |
    SNW -> X  | +   +   +   +   +   +     +   + |
    SNRW -> X | +   +   +   +   +   +     +   + |


shared, shared read, shared write, shared no read, shared no write, 
shared upgradeable, shared no read write, exclusive

Considerations reflected in the matrix:
- lock starvation, and henceforth lock priority
- lock upgrades, and henceforth lock incompatibility
matrix is differnt - it's ugpradeable, and henceforth is incompatible
with each other
- special cases: intention exclusive lock, intention shared, etc
(a warning lock), auto_increment/concurrent insert lock
- next-key locking and phantoms

2pl locking and physical locking
--------------------------------

(Crab locking, or tree locking)

Alternatives to 2PL locking
---------------------------

Are there simple alternatives to 2PL locking algorithm?

* optimistic concurrency control
  * timestamping
  * validation
* batched transaction execution
* multi-version concurrency control

and combinations of thereof.

Optimistic concurrency control
------------------------------
Optimistic concurrency control works well under circumstances
when there are no or few conflicts, since it assuems the

Batched transaction execution
-----------------------------

Before we go on to MVCC, 

Mechanisms of latching
----------------------

Locking is logical - but there is another problem related
to concurrent transaction execution, and it is concurrent 
access to an data index. 

One algorithm for concurrent index access is


Lock congestion and probability of deadlock.


Optimistic control
-------------------

Validation: you collect all records in transaction log
as long as you update them.

Timestamping: you put a timestamp on every row on every read (T(R))
or write (T(W)), as well as you assign timestaps to the transaction,
and abort a transaction when/if you find a record
with a timestamp newer than your transaction id (reads after writes,
writes after reads). So timestamps are ascending numbers, you don't
have to use clocks.

Thomas write rule: writes can be skipped when there is a write
with a newer timestap already.

Rules for optimistic timestamp-based scheduler:

1. r1(x):

a) if ts(1) >= wt(x) then read is physically realizable

  0) if c(x) is true, grant the request. Update
     rt(x) with ts(1), if ts(1) > rt(x)
  1) if c(x) is false, delay t until c(x) becomes true or the transaction
     that wrote X aborts
 
b) if ts(1) < wt(x) then read is physically unrealizable.  Rollback (t)
abort T and restart it with a newer timestamp.

2. w1(x)

  a) if ts(1) >= rt(x) and tx(1) >= wt(x) the write is physically realizable      and must be performed.

     write the new value of X
     set wt(x) to ts(1)
     clear commit bit of (x)

  b) if ts(1) >= rt(x) but ts(1) < wt(x), then write
     is physically realizable but there is a already a 
     later write in X. if C(x) is true, then the previous writer of
     X is comitted, wand we simple ignore the write by !. We allow 
     1 to proceed and make no change to the database. However,
     if commit bit is dirty, then we must delay T
     the same way as in read.

  c)  ts(1) < rt(1) thenn the write is physically unrealizable, and T
      must be rolled back.

3) Suppose the rscheduler receives a request to commit 1.
   It msut clear or dirty commit bits for all modified
   records by 1, and wake up all waiters.

4) In case of rollback, the same - clear commit bit, 
   wake up all waiters, but the waiter has to re-try, 
   with the new data/commit status.
  
MVCC: you keep old versions in addition to the old
ones, and purge them in the background.

With this in mind, there is:

- read uncommitted
- read committed
- repeatable read/snapshot isolation
- serializable

-> isolation levels


Part 2
------

UNDO/REDO logging and checkpointing

Mention idempotency of recovery
Mention Stoev test - continuous crashes during recovery

Redo logging
------------

Problem of UNDO logging
-----------------------

With UNDO logging we can't commit a transaction without
first writing all its changed data to disk. 

This is more than strictly necessary to recovery, since the data is already
in the WAL



21:33:40] konstantinosipov: Дима, привет!
[21:34:13] konstantinosipov: а не вспомнишь пример когда нам для foreign key
constraints/triggers нужен был строгий 2pl от innodb (serializable isolation
level), и mvcc не помогал?
[22:32:14] Dmitri Lenev: привет
[22:32:28] Dmitri Lenev: мне кажется ты смешиваешь понятия
[22:32:41] Dmitri Lenev: для FK недостаточно repetable read
[22:32:57] Dmitri Lenev: aka consistent snapshot
[22:33:40] Dmitri Lenev: но на mvcc они могут работать, просто нужны или гэп
локи, или всякие трюки типа тех что мы использовали в Фальконе
[22:34:01] Dmitri Lenev: почему не достаточен repeatable read пример простой
[22:34:22] Dmitri Lenev: create table child (fk int references parent(pk))l
[22:34:33] Dmitri Lenev: create table parent(pk int primary key);
[22:34:42] Dmitri Lenev: insert into parent values (1);
[22:35:11] Dmitri Lenev: trx1: start transaction with consistent snapshot;
[22:35:28] Dmitri Lenev: trx2: start transaction with consistent snapshot;
[22:35:38] Dmitri Lenev: trx2: select * from child;
[22:35:49] Dmitri Lenev: trx1: insert into child values (1);
[22:35:57] Dmitri Lenev: trx2: delete from parent;
[22:36:15] Dmitri Lenev: oops trx2 should not see row in child according to
repeatable read
[22:36:22] Dmitri Lenev: so row from parent gets deleted
[22:36:30] Dmitri Lenev: and we have inconsistency
[22:37:58] Dmitri Lenev: С MVCC этот пример будет работать если проверки FK
будут забивать на repeatable read/consistent snapshot и видеть/смотреть на то
что делают другие транзакции
[22:39:22] Dmitri Lenev: то есть delete в trx2 должен увидеть что есть trx1
которая вставила в child и не закоммитила и ждать
[22:43:09] konstantinosipov: о спс
[22:43:14] konstantinosipov: я студентам завтра раскажу
[22:43:22] konstantinosipov: ты ответил на мой вопрос, я именно это и
спрашивал
[22:44:06] konstantinosipov: смысл такой: я пытаюсь объснить студентам зачем
нужны record level locks даже при  mvcc
[22:44:09] konstantinosipov: зачем они полезны
[22:44:22] konstantinosipov: пытаюсь показать им разницу между mvcc и
serializable
[22:44:40] konstantinosipov: что на mvcc чистом со snapshot isolation
serializable недостижим
[22:45:21] Dmitri Lenev: ну это да... можно подойти со стороны timestamping
[22:45:44] Dmitri Lenev: сказать что вот timestamping вроде почти mvcc но дает
serializable
[22:46:01] Dmitri Lenev: за счет чего ? потому что чтения помечают записи как
прочитанные
[22:46:39] konstantinosipov: да
[22:47:13] Dmitri Lenev: то есть там есть два аспекта
[22:47:23] Dmitri Lenev: 1) это чтения
[22:47:34] Dmitri Lenev: 2) это дырки/предикатные локи
[22:47:39] konstantinosipov: угу
[22:49:39] Dmitri Lenev: с FK в Фальконе мы планировали обходить 2)

