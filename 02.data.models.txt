Entity-relationship data model
------------------------------

An entity is an object of some sort. It resembless a class in object
-oriented programs.

To disamgiguate individual objects and classes entity is distinguished
from an entity set. 

Attributes of an entity are either atomic, or structures, or containers.
So, not everything is an object.

Entity                Entity           Relationship
Movies                Stars            Appears-in

Multi-way relations can be converted to 1-to-many relations
(conceptualy)

Subcasses can be modelled with relation 'isa'

Object-relational models, the principle of exposure
---------------------------------------------------
- create a relation for each entity  - key of the root,
entity-specific attributes
- create a relation for each entity - but store the root
in the relation
- use null values
- representing compound attributes

Issues:
- it is expensive to answer queries involving several relations

A query involving several relations, depending on decomposition, is either
a) or b)

NULL method:
Adding members to objects -> rebuild entire relation
Minimize space, avoid repetition

How are objects usually represented in a reational database:
-----------------------------------------------------------


D can be exposed - i.e. considered not an atom.
Exposure is a function of the application. An application changes,
what used to be an atom, is exposed.

Type is not its representation 

Esposure is paramount, since existence of exposure either must
impact the storage layout, or will severely impact performance.


Object-oriented models
----------------------

- objects are persistent
- they speak nothing about how objects map to relations, or,
if they do, they choose some way of decomposition. 

It's necessary to understand that what matter is not how
an object maps to relation, but how object maps to an 
underlying data structure, so that access and modification
is economical.

object concept #1 - an object has an identity independent on 
its value - can it be ignored?

exposure - in object system - adds an idenity


- to conclude, an object model is:
 a bit more flexible than relational model, since it makes
 certain object operations transparent
 yet it doesnot solve the principal problems of any object-reational,
 or object-representation mapping:
 - the problem of exposure
 - the problem of perfect data decomposition
type/class

- compared to schema-less data model it still requires an in-advance
schema definition

relations are sets or bags or collections

class Movie {
    attribute string title;



association: parent-child, uses

aggregation, composition: Set, Bag, List

Reference

relationship Set<Star> stars inverse Star::StarredIn
relationship Studio ownedBy inverse Studio::owns

}
inheritance

Under the hood, if we presume there are b-trees, the implementation

Semistructured data (XML)
-------------------------

root node

every object is described by its path from the root.

<star>
</star>

<movie>
</movie>

- data is self-describing - the schema is within
the schema, however, is impossible to vaidate
- a leap from information integration and small databases (lotus notes)
to your-default-choice for a non-relational database

well formed xml vs. valid xml - existence of schema

Conclusion
----------

How to choose the right schema:

- your pattern is key/value and will stay key/value: key/value
- your aggregate unstructured data but you worry about data quality:
XML or binary repr. of XML with schema
- your aggregate unstructured data, but 

- pure relational - you don't have any better
- object-relational, or partially structured 
- these indexes must be there, 
